// Code generated by ttool.
// DO NOT EDIT!

package {{underline .Pkg}}

import (
    "fmt"
	"time"
	"github.com/silenceper/gogen/pkg/orm"
	"github.com/jinzhu/gorm"
)


var _ = time.Now()

//{{upperCamel .PrettyTableName}} table entity
type {{upperCamel .PrettyTableName}} struct {
 	{{ range $i, $v := .Columns }}
	{{upperCamel $v.Field}} {{$v.GoType}} `gorm:"column:{{$v.Field}};{{if eq $.PrimaryKey $v.Field}}primary_key;{{end}}{{if $v.AutoIncrement }}AUTO_INCREMENT;{{end}}{{if eq $v.Null "NO"}}not null;{{end}}{{if $v.Unique}}unique;{{end}}type:{{$v.Type}}" json:"{{$v.Field}}"` {{end}}

	_db *orm.DBInfo
	_tx *orm.Transaction
}

//TableName 表名
func (obj *{{upperCamel .PrettyTableName}}) TableName() string {
	return "{{.TableName}}"
}

//New{{upperCamel .PrettyTableName}} 实例化
func New{{upperCamel .PrettyTableName}}() *{{upperCamel .PrettyTableName}} {
	obj := New{{upperCamel .PrettyTableName}}WithoutDb()
	obj.SetDBInfo()
	return obj
}

//New{{upperCamel .PrettyTableName}}WithoutDb  实例化不包含db信息
func New{{upperCamel .PrettyTableName}}WithoutDb() *{{upperCamel .PrettyTableName}} {
	//can set default field
	return &{{upperCamel .PrettyTableName}}{}
}

//SetDBInfo 设置db连接信息
func (obj *{{upperCamel .PrettyTableName}}) SetDBInfo() {
	database := GetDB()
	obj._db = &orm.DBInfo{
		DB: database.DB,
	}
}

//SetTransaction 设置事物
func (obj *{{upperCamel .PrettyTableName}}) SetTransaction(tx *orm.Transaction) {
	obj._tx = tx
}

//GetSQLExecutor 获取sql执行器
func (obj *{{upperCamel .PrettyTableName}}) GetSQLExecutor() orm.SQLExecutor {
	if obj._tx != nil {
		return obj._tx
	}
	return obj._db
}


{{if ne .PrimaryKey ""}}
//Insert 插入一条数据
func (obj *{{upperCamel .PrettyTableName}}) Insert() {
	database := obj.GetSQLExecutor()
	if err := database.Create(obj).Error; err != nil {
		panic(err)
	}
}
{{end}}

//Update 根据主键更新
func (obj *{{upperCamel .PrettyTableName}}) Update() {
	database := obj.GetSQLExecutor()
	if err := database.Save(obj).Error; err != nil {
		panic(err)
	}
}

//Save 如果pk存在则更新，否则插入一条新纪录
func (obj *{{upperCamel .PrettyTableName}}) Save() {
	database := obj.GetSQLExecutor()
	if err := database.Save(obj).Error; err != nil {
		panic(err)
	}
}

{{if ne .PrimaryKey ""}}
//Delete delete by pk
func (obj *{{upperCamel .PrettyTableName}}) Delete() int64 {
	database := obj.GetSQLExecutor()
	result := database.Delete(obj)
	if err := result.Error; err != nil {
		if err != gorm.ErrRecordNotFound {
			panic(err)
		}
	}
	return result.RowsAffected
}
{{end}}

//Delete{{upperCamel .PrettyTableName}}By 根据条件删除
func Delete{{upperCamel .PrettyTableName}}By(where string, args ...interface{}) int64 {
	database := GetDB()
	sql := "DELETE FROM `{{.TableName}}` "
	if where != "" {
		sql = fmt.Sprintf("%s where %s", sql, where)
	}

	result := database.Exec(sql, args...)
	if err := result.Error; err != nil {
		if err != gorm.ErrRecordNotFound {
			panic(err)
		}
	}
	return result.RowsAffected
}

{{if ne .PrimaryKey ""}}
//Get{{upperCamel .PrettyTableName}}By{{upperCamel .PrimaryKey}} 根据主键获取值
func Get{{upperCamel .PrettyTableName}}By{{upperCamel .PrimaryKey}}({{.PrimaryKey}} string) *{{upperCamel .PrettyTableName}} {
	obj := &{{upperCamel .PrettyTableName}}{}
	database := GetDB()
	sql := "SELECT {{.FieldStringList}} FROM `{{.TableName}}` WHERE `{{.PrimaryKey}}`=? limit 1"
	if err := database.Raw(sql, {{.PrimaryKey}}).Scan(obj).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil
		}
		panic(err)
	}
	obj.SetDBInfo()
	return obj
}
{{end}}


//Get{{upperCamel .PrettyTableName}}First 根据条件获取一条记录
func Get{{upperCamel .PrettyTableName}}First(where string, args ...interface{}) *{{upperCamel .PrettyTableName}} {
	obj := &{{upperCamel .PrettyTableName}}{}
	database := GetDB()
	sql := "SELECT {{.FieldStringList}} FROM `{{.TableName}}` "
	if where != "" {
		sql = fmt.Sprintf("%s WHERE %s", sql, where)
	}
	sql = fmt.Sprintf("%s limit 1", sql)
	if err := database.Raw(sql, args...).Scan(obj).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil
		}
		panic(err)
	}
	obj.SetDBInfo()
	return obj
}

//Get{{upperCamel .PrettyTableName}}Where 根据条件获取所有记录
func Get{{upperCamel .PrettyTableName}}Where(where string, args ...interface{}) []*{{upperCamel .PrettyTableName}} {
	objs := []*{{upperCamel .PrettyTableName}}{}
	database := GetDB()
	sql := "SELECT {{.FieldStringList}} FROM `{{.TableName}}` "
	if where != "" {
		sql = fmt.Sprintf("%s WHERE %s", sql, where)
	}
	if err := database.Raw(sql, args...).Scan(&objs).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil
		}
		panic(err)
	}
	for _, obj := range objs {
		obj.SetDBInfo()
	}
	return objs
}

//Get{{upperCamel .PrettyTableName}}Count 获取指定记录行数
func Get{{upperCamel .PrettyTableName}}Count(where string, args ...interface{}) int64 {
	database := GetDB()
	var count int64
	sql := "SELECT COUNT(1) FROM `{{.TableName}}` "
	if where != "" {
		sql = fmt.Sprintf("%s WHERE %s", sql, where)
	}
	if err := database.Raw(sql, args...).Count(&count).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return 0
		}
		panic(err)
	}
	return count
}

